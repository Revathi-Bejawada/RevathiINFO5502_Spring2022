{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Revathi-Bejawada/RevathiINFO5731_Spring2022/blob/main/Sample\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DymRJbxDBCnf"
      },
      "source": [
        "# **The first Lab-assignment (01/25/2022, 50 points in total)**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jJDe71iLB616"
      },
      "source": [
        "(1) Write a Python program to count the number of characters in a string. (5 points)\n",
        "\n",
        "Sample String : 'google.com', \n",
        "\n",
        "Expected Result : {'o': 3, 'g': 2, '.': 1, 'e': 1, 'l': 1, 'm': 1, 'c': 1}"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MtKskTzbCLaU",
        "outputId": "319515a9-a922-43b4-fcd8-05bad5b6f74f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter a String: google.com\n",
            "Counter({'o': 3, 'g': 2, 'l': 1, 'e': 1, '.': 1, 'c': 1, 'm': 1})\n"
          ]
        }
      ],
      "source": [
        "# write your answer here\n",
        "import collections\n",
        "\n",
        "def char_count():\n",
        "    r = input('Enter a String: ') # enter your desired string\n",
        "    return collections.Counter(list(r)) #  count elements from a string\n",
        "print(char_count())"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "55W9AMdXCSpV"
      },
      "source": [
        "(2) Write a Python program to sum all the items in a list. (5 points)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "I57NXsauCec2",
        "outputId": "7efa9930-2450-446d-b51d-ddc865f64b99"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "98\n"
          ]
        }
      ],
      "source": [
        "# write your answer here\n",
        "\n",
        "def item_list(sum):\n",
        "    sum_add = 0\n",
        "    for r in sum:\n",
        "        sum_add += r\n",
        "    return sum_add\n",
        "print(item_list([1,18,24,55]))\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4ulBZ6yhCi9F"
      },
      "source": [
        "(3) Write a Python program to get a string from a given string where all occurrences of its first char have been changed to '\\$', except the first char itself. (5 points)\n",
        "\n",
        "Sample String : 'restart', \n",
        "\n",
        "Expected Result : 'resta\\$t'"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Fj0XhwbBCw2o",
        "outputId": "688f5868-4ddc-4439-c86a-708b384a9358"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "resta$t\n"
          ]
        }
      ],
      "source": [
        "# write your answer here\n",
        "def replace_char(word):  #word here is restart\n",
        "  character = word[0] # word[0]=r so charcater= r\n",
        "  word = word.replace(character, '$') #replace r letters in the word restart so word = $esta$t\n",
        "  word = character + word[1:] # word = resta$t\n",
        "\n",
        "  return word\n",
        "\n",
        "print(replace_char('restart'))\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_bIP7s1MCzue"
      },
      "source": [
        "(4) Write a program with python which could accept two parameter a and b to calculate and output the result of S, where \n",
        "\n",
        "$\\ S=3.14*(1+a/b)^3$ (5 points)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "w79QilHXD3Mg",
        "outputId": "592e544d-0e7b-4bdd-df20-1928156bbeba"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The value of s is:  149.4409544378074\n"
          ]
        }
      ],
      "source": [
        "# write your answer here\n",
        "a = 6.14\n",
        "b = 2.34\n",
        "s = 3.14*(1+a/b)**3\n",
        "print('The value of s is: ',s)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xCa2bK9aD4Q3"
      },
      "source": [
        "(5) Write a Python program to concatenate following dictionaries to create a new one. (5 points)\n",
        "\n",
        "Sample Dictionary : dic1={1:10, 2:20}, dic2={3:30, 4:40}, dic3={5:50,6:60}, \n",
        "\n",
        "Expected Result : {1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60}\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_z4aLqAbEET1",
        "outputId": "d1a7b7fb-7862-48e8-ba2c-35e674426009"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60}\n"
          ]
        }
      ],
      "source": [
        "# write your answer here\n",
        "dy_1={1:10, 2:20}\n",
        "dy_2={3:30, 4:40}\n",
        "dy_3={5:50,6:60}\n",
        "dy_4 = {}\n",
        "for r in (dy_1, dy_2, dy_3): dy_4.update(r)\n",
        "print(dy_4)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0v48Vqa7FrQh"
      },
      "source": [
        "(6) Write a Python program to check whether an element exists within a tuple. (5 points)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7WEmgq-DF2P1",
        "outputId": "6b8ddfdd-adf9-4745-8284-4e4d8de05836"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n",
            "False\n",
            "True\n",
            "False\n"
          ]
        }
      ],
      "source": [
        "# write your answer here\n",
        "my_name = (\"r\", \"e\", \"v\", \"a\", \"t\", \"h\", \"i\")\n",
        "my_dob = (\"6\", \"6\", \"1998\")\n",
        "print(\"r\" in my_name)\n",
        "print(5 in my_dob)\n",
        "print(\"1998\" in my_dob)\n",
        "print(\"s\" in my_name)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vD5PYLMuGga_"
      },
      "source": [
        "(7) Write a Python program to find maximum and the minimum value in a set. (5 points)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "t0D5kdJUGjjw",
        "outputId": "9f700f2e-14ec-47e9-fc7e-e05071380f38"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Maximum value in a set: 84\n",
            "Minimum value in a set: 4\n"
          ]
        }
      ],
      "source": [
        "# write your answer here\n",
        "from typing import Set\n",
        "set = {18, 67, 4, 84, 38, 22}\n",
        "print(\"Maximum value in a set:\" , max(set))\n",
        "print(\"Minimum value in a set:\", min(set))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uHkd-y5VhVWC"
      },
      "source": [
        "(8) Write a Python program to randomly divide the students in this class into six groups for term projects, each group should have at least 4 students but no more than 6 students (including 6). Here is the students list: (5 points)\n",
        "\n",
        "studnet_list = ['ja0964','sa1198','sb1357','vb0218','sc1229','kg0569','kg0470','sg1297','bg0320','fh0141','jl1252','sk1386',\n",
        "           'ak0956','sk1390','sk1458','sk1313','ak0934','vm0377','nm0618','sm1640','sm1907','gn0108','pr0353','dr0609','ms1500','aos0040','ds0814', 'av0659','nv0234','hy0232']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 236
        },
        "id": "3iGbmcOBhTwy",
        "outputId": "d4461c50-5b3c-463f-9c3b-af2ce58f9e4d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Possible lengths of groups:  [[4, 4, 4, 6, 6, 6], [4, 4, 5, 5, 6, 6], [4, 5, 5, 5, 5, 6], [5, 5, 5, 5, 5, 5]]\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-17-d9663af1febe>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     27\u001b[0m     \u001b[0mone_random\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mremove\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mxx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     28\u001b[0m     \u001b[0mbatches\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrandom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mchoice\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstudent_list\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mxx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreplace\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 29\u001b[0;31m     \u001b[0mstudent_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstudent_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0mset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbatches\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     30\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbatches\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mTypeError\u001b[0m: 'set' object is not callable"
          ]
        }
      ],
      "source": [
        "# write your answer here\n",
        "from itertools import combinations\n",
        "import random\n",
        "import numpy as np\n",
        "\n",
        "student_list = ['ja0964','sa1198','sb1357','vb0218','sc1229','kg0569','kg0470','sg1297','bg0320','fh0141','jl1252','sk1386',\n",
        "'ak0956','sk1390','sk1458','sk1313','ak0934','vm0377','nm0618','sm1640','sm1907','gn0108','pr0353','dr0609','ms1500','aos0040','ds0814', 'av0659','nv0234','hy0232']\n",
        "stlen = len(student_list)\n",
        "\n",
        "\n",
        "max_lst = [4]*3 + [5]*6 + [6]*3\n",
        "\n",
        "possible_combinations = []\n",
        "all_combinations = [list(comb )for comb in combinations(max_lst, 6)]\n",
        "\n",
        "#Retrieving all combinations with count of students\n",
        "for i in all_combinations:\n",
        "    if sum(i)==stlen and i not in possible_combinations:\n",
        "        possible_combinations.append(i)\n",
        "print(\"Possible lengths of groups: \",possible_combinations)\n",
        "\n",
        "#Picking up one random possible lengths\n",
        "one_random = possible_combinations[random.randint(0,3)]\n",
        "\n",
        "for _ in range(6):\n",
        "    xx = random.choice(one_random)\n",
        "    one_random.remove(xx)\n",
        "    batches = np.random.choice(student_list, size=xx, replace=False)\n",
        "    student_list = list(set(student_list)-set(batches))\n",
        "    print(batches)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qYja3t-Dhgc5"
      },
      "source": [
        "(9) Write a Python program to find the duplicate elements in a given array of integers. Return -1 If there are no such elements. (5 points)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "60Oko8JFhgc5",
        "outputId": "2b5707c4-acba-4ccf-8581-6488f107115f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[20, 30, -20, 60]\n",
            "-1\n"
          ]
        }
      ],
      "source": [
        "def Repeat(x):\n",
        "\n",
        "    _size = len(x)\n",
        "\n",
        "    repeated = []\n",
        "\n",
        "    for i in range(_size):\n",
        "\n",
        "        k = i + 1\n",
        "\n",
        "        for j in range(k, _size):\n",
        "\n",
        "            if x[i] == x[j] and x[i] not in repeated:\n",
        "\n",
        "                repeated.append(x[i])\n",
        "\n",
        "    return -1 if len(repeated) == 0 else repeated\n",
        "    return repeated\n",
        "    #return -1 if len(repeated) == 0 else repeated\n",
        "\n",
        "# Driver Code\n",
        "\n",
        "list1 = [10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20]\n",
        "list2 = [1, 2, 3]\n",
        "\n",
        "print (Repeat(list1))\n",
        "print (Repeat(list2))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_ef3n03Mhgc5"
      },
      "source": [
        "(10) Write a Python program to select all the Sundays of a specified year. (5 extra points)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BvEE0jGShgc6",
        "outputId": "bdb3d538-aae5-448d-a021-569ea150a060"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2025-01-05\n",
            "2025-01-12\n",
            "2025-01-19\n",
            "2025-01-26\n",
            "2025-02-02\n",
            "2025-02-09\n",
            "2025-02-16\n",
            "2025-02-23\n",
            "2025-03-02\n",
            "2025-03-09\n",
            "2025-03-16\n",
            "2025-03-23\n",
            "2025-03-30\n",
            "2025-04-06\n",
            "2025-04-13\n",
            "2025-04-20\n",
            "2025-04-27\n",
            "2025-05-04\n",
            "2025-05-11\n",
            "2025-05-18\n",
            "2025-05-25\n",
            "2025-06-01\n",
            "2025-06-08\n",
            "2025-06-15\n",
            "2025-06-22\n",
            "2025-06-29\n",
            "2025-07-06\n",
            "2025-07-13\n",
            "2025-07-20\n",
            "2025-07-27\n",
            "2025-08-03\n",
            "2025-08-10\n",
            "2025-08-17\n",
            "2025-08-24\n",
            "2025-08-31\n",
            "2025-09-07\n",
            "2025-09-14\n",
            "2025-09-21\n",
            "2025-09-28\n",
            "2025-10-05\n",
            "2025-10-12\n",
            "2025-10-19\n",
            "2025-10-26\n",
            "2025-11-02\n",
            "2025-11-09\n",
            "2025-11-16\n",
            "2025-11-23\n",
            "2025-11-30\n",
            "2025-12-07\n",
            "2025-12-14\n",
            "2025-12-21\n",
            "2025-12-28\n"
          ]
        }
      ],
      "source": [
        "# write your answer here\n",
        "from datetime import date, timedelta\n",
        "\n",
        "def all_sun(year):\n",
        "       first_day = date(year, 1, 1)      \n",
        "       first_day += timedelta(days = 6 - first_day.weekday())  \n",
        "       while first_day.year == year:\n",
        "          yield first_day\n",
        "          first_day += timedelta(days = 7)\n",
        "          \n",
        "for r in all_sun(2025):\n",
        "   print(r)\n",
        "   \n"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "collapsed_sections": [],
      "name": "lab_assignment_01 (1).ipynb",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.5"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}